" Initialize NeoBundle
set runtimepath+=~/.vim/bundle/neobundle.vim

" Collect bundles
call neobundle#rc(expand('~/.vim/bundle'))

" Let NeoBundle manage NeoBundle
NeoBundleFetch 'Shougo/neobundle.vim'

" Plugins
NeoBundle 'Shougo/unite.vim'
NeoBundle 'ervandew/supertab'
NeoBundle 'scrooloose/syntastic'
NeoBundle 'Lokaltog/vim-easymotion'
NeoBundle 'terryma/vim-multiple-cursors'
NeoBundle 'scrooloose/nerdcommenter'
NeoBundle 'bronson/vim-trailing-whitespace'
NeoBundle 'bkad/CamelCaseMotion'
NeoBundle 'Yggdroot/indentLine'
NeoBundle 'tpope/vim-abolish'
NeoBundle 'junegunn/goyo.vim'
NeoBundle 'bling/vim-airline'
NeoBundle 'wting/rust.vim'
NeoBundle 'garbas/vim-snipmate'
NeoBundle 'honza/vim-snippets'
NeoBundle 'MarcWeber/vim-addon-mw-utils'
NeoBundle 'tomtom/tlib_vim'
NeoBundle 'airblade/vim-gitgutter'

" Syntax
NeoBundle 'ataraxer/vim-oceanic'
NeoBundle 'derekwyatt/vim-scala'
NeoBundle 'kchmck/vim-coffee-script'
NeoBundle 'toyamarinyon/vim-swift'
NeoBundle 'pangloss/vim-javascript'
NeoBundle 'gkz/vim-ls'
NeoBundle 'ekalinin/Dockerfile.vim'

" Colorschemes
NeoBundle 'ataraxer/vim-nightlight'
NeoBundle 'noahfrederick/vim-hemisu'
NeoBundle 'jonathanfilip/vim-lucius'
NeoBundle 'vim-scripts/strange'
NeoBundle 'altercation/vim-colors-solarized'
NeoBundle 'vim-scripts/saturn.vim'
NeoBundle 'chriskempson/base16-vim'

" enable filetype specific indenting and plugins
filetype plugin indent on

" ask to load bundles on vim start
NeoBundleCheck

" ==== Settings ==== "

" syntax highlighting scheme
color oceanic

" multiple cursors
hi multiple_cursors_cursor cterm=none
hi link multiple_cursors_visual Visual

" airline
let g:airline#extensions##enabled = 1
let g:airline#extensions#branch#enabled = 1
let g:airline#extensions#syntastic#enabled = 1
let g:airline#extensions#whitespace#enabled = 0
let g:airline_detect_modified = 1
let g:airline_powerline_fonts = 1
let g:airline_theme = 'powerlineish'

" indent line
let g:indentLine_faster = 1
let g:indentLine_color_term = 10

" easy motion
let g:EasyMotion_smartcase = 1
let g:EasyMotion_keys = 'asdfjkl;weio'

" unite
let g:unite_split_rule = 'botright'
let g:unite_force_overwrite_statusline = 0
let g:unite_winheight = 12
" remove trailing whitespace highlighting in unite window
au FileType unite hi ExtraWhiteSpace ctermbg=none
au BufRead,BufNewFile *.sbt let g:syntastic_scala_checkers=['']


" ==== Mappings ==== "

map <silent> <leader>/ <plug>NERDCommenterToggle<CR>


" replace standart serach with easymotion
map  / <plug>(easymotion-sn)
omap / <plug>(easymotion-tn)

map <leader>w <plug>(easymotion-lineanywhere)

map <silent> w <plug>CamelCaseMotion_w
map <silent> b <plug>CamelCaseMotion_b

map <silent> <leader>a <plug>Coerce

" unite
map <silent> <leader>b :Unite buffer<CR>
map <silent> <leader>f :Unite file<CR>

" open new empty tab and show file prompt
map <silent> <leader>t :tabnew<CR>:Unite file<CR>

" automation
" remove trailing whitespaces on save
au BufWritePost * :FixWhitespace

" Goyo
nnoremap <Leader><Space> :Goyo 80<CR>
let g:goyo_margin_top = 0
let g:goyo_margin_bottom = 0
"let g:goyo_linenr = 1

function! g:Goyo_before()
  " toggle Goyo
  nnoremap <Leader><Space> :q<CR>
  " force exit vim
  map <silent> <leader>q :q<CR>:q<CR>
  "silent !tmux set -g status off > /dev/null
endfunction

function! g:Goyo_after()
  " togle Goyo
  nnoremap <Leader><Space> :Goyo 80<CR>
  " restore \q mapping
  map <silent> <leader>q :q<CR>
  "silent !tmux set -g status on > /dev/null
  syntax off
  syntax on
  IndentLinesReset
  AirlineRefresh
endfunction

let g:goyo_callbacks = [function('g:Goyo_before'), function('g:Goyo_after')]

let g:gitgutter_realtime = 0
let g:gitgutter_eager = 0



" Initialize NeoBundle
set runtimepath+=~/.vim/bundle/neobundle.vim

" Collect bundles
call neobundle#rc(expand('~/.vim/bundle'))

" Let NeoBundle manage NeoBundle
NeoBundleFetch 'Shougo/neobundle.vim'

" Plugins
NeoBundle 'Shougo/unite.vim'
NeoBundle 'ervandew/supertab'
NeoBundle 'scrooloose/syntastic'
NeoBundle 'Lokaltog/vim-easymotion'
NeoBundle 'terryma/vim-multiple-cursors'
NeoBundle 'scrooloose/nerdcommenter'
NeoBundle 'bronson/vim-trailing-whitespace'
NeoBundle 'bkad/CamelCaseMotion'
NeoBundle 'Yggdroot/indentLine'
NeoBundle 'tpope/vim-abolish'
NeoBundle 'junegunn/goyo.vim'
NeoBundle 'bling/vim-airline'
NeoBundle 'wting/rust.vim'

" Syntax
"NeoBundle 'derekwyatt/vim-scala'
NeoBundle 'rosstimson/scala-vim-support'
NeoBundle 'kchmck/vim-coffee-script'
NeoBundle 'toyamarinyon/vim-swift'
NeoBundle 'pangloss/vim-javascript'

" Colorschemes
NeoBundle 'noahfrederick/vim-hemisu'

" enable filetype specific indenting and plugins
" required by NeoBundle
filetype plugin indent on

" ask to load bundles on vim start
NeoBundleCheck

" Settings
" airline
let g:airline_powerline_fonts = 1
let g:airline_detect_modified = 1
"let g:airline_theme = 'wombat'
"let g:airline_theme = 'bubblegum'
let g:airline_theme = 'powerlineish'
"let g:airline_theme = 'lucius'
let g:airline#extensions#whitespace#enabled = 0


" colorscheme
color hemisu
set background=light

hi multiple_cursors_cursor cterm=none
hi link multiple_cursors_visual Visual

" TODO: find out why that's not working
hi link scalaKeywordModifier Constant
hi link scalaNameDefinition  Keyword

" airline
let g:airline_detect_modified = 1
let g:airline_theme = 'powerlineish'
let g:airline_powerline_fonts = 1
let g:airline#extensions#branch#enabled = 1
let g:airline#extensions#syntastic#enabled = 1
let g:airline#extensions##enabled = 1
"let g:airline#extensions#tabline#enabled = 1


" indent lines with |
"let g:indentLine_char = '|'
let g:indentLine_faster = 1

" mappings
map <silent> <leader>/ <plug>NERDCommenterToggle<CR>

" replace standart serach with easymotion
map  / <plug>(easymotion-sn)
omap / <plug>(easymotion-tn)
"map  <Tab> <plug>(easymotion-next)
"map  <S-Tab> <plug>(easymotion-prev)

map <leader>w <plug>(easymotion-lineanywhere)

let g:EasyMotion_smartcase = 1
let g:EasyMotion_keys = 'asdfjkl;weio'

map <silent> w <plug>CamelCaseMotion_w
map <silent> b <plug>CamelCaseMotion_b
"sunmap w
"sunmap b

map <silent> <leader>a <plug>Coerce

" unite
" remove trailing whitespace highlighting in unite window
au BufEnter *     hi ExtraWhiteSpace ctermbg=217
au FileType unite hi ExtraWhiteSpace ctermbg=none

let g:unite_split_rule = 'botright'
let g:unite_force_overwrite_statusline = 0
let g:unite_winheight = 12

map <silent> <leader>b :Unite buffer<CR>
map <silent> <leader>f :Unite file<CR>

" open new empty tab and show file prompt
map <silent> <leader>t :tabnew<CR>:Unite file<CR>

" automation
" remove trailing whitespaces on save
au BufWritePost * :FixWhitespace

" Goyo
nnoremap <Leader><Space> :Goyo 80<CR>
let g:goyo_margin_top = 0
let g:goyo_margin_bottom = 0
"let g:goyo_linenr = 1

function! g:goyo_before()
  " toggle Goyo
  nnoremap <Leader><Space> :q<CR>
  " force exit vim
  map <silent> <leader>q :q<CR>:q<CR>
  silent !tmux set -g status off > /dev/null
endfunction

function! g:goyo_after()
  " togle Goyo
  nnoremap <Leader><Space> :Goyo 80<CR>
  " restore \q mapping
  map <silent> <leader>q :q<CR>
  silent !tmux set -g status on > /dev/null
  "syntax on
  IndentLinesReset
  AirlineRefresh
endfunction

let g:goyo_callbacks = [function('g:goyo_before'), function('g:goyo_after')]
